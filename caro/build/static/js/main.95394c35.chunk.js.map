{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["EMPTY","CIRCLE","CROSS","Square","position","value","takeTurn","className","onClick","Circle","Cross","width","height","viewBox","cx","cy","r","x1","y1","x2","y2","Result","winner","reset","App","React","useState","player","positions","state","setState","p","every","delectWinner","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95394c35.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst EMPTY = 'EMPTY';\nconst CIRCLE = 'CIRCLE';\nconst CROSS = 'CROSS';\n\nfunction App() {\n  const [state, setState] = React.useState({\n    player: CIRCLE,\n    positions: [\n      EMPTY, EMPTY, EMPTY,\n      EMPTY, EMPTY, EMPTY,\n      EMPTY, EMPTY, EMPTY\n    ],\n  })\n  const winner = delectWinner(state.positions);\n  function delectWinner(p){\n    if(p[0] == CIRCLE && p[1] == CIRCLE && p[2] == CIRCLE) return CIRCLE;\n    if(p[3] == CIRCLE && p[4] == CIRCLE && p[5] == CIRCLE) return CIRCLE;\n    if(p[6] == CIRCLE && p[7] == CIRCLE && p[8] == CIRCLE) return CIRCLE;\n\n    if(p[0] == CIRCLE && p[3] == CIRCLE && p[6] == CIRCLE) return CIRCLE;\n    if(p[1] == CIRCLE && p[4] == CIRCLE && p[7] == CIRCLE) return CIRCLE;\n    if(p[2] == CIRCLE && p[5] == CIRCLE && p[8] == CIRCLE) return CIRCLE;\n\n    if(p[0] == CIRCLE && p[4] == CIRCLE && p[8] == CIRCLE) return CIRCLE;\n    if(p[2] == CIRCLE && p[4] == CIRCLE && p[6] == CIRCLE) return CIRCLE;\n\n    if(p[0] == CROSS&& p[1] == CROSS&& p[2] == CROSS) return CROSS;\n    if(p[3] == CROSS&& p[4] == CROSS&& p[5] == CROSS) return CROSS;\n    if(p[6] == CROSS&& p[7] == CROSS&& p[8] == CROSS) return CROSS;\n\n    if(p[0] == CROSS&& p[3] == CROSS&& p[6] == CROSS) return CROSS;\n    if(p[1] == CROSS&& p[4] == CROSS&& p[7] == CROSS) return CROSS;\n    if(p[2] == CROSS&& p[5] == CROSS&& p[8] == CROSS) return CROSS;\n\n    if(p[0] == CROSS&& p[4] == CROSS&& p[8] == CROSS) return CROSS;\n    if(p[2] == CROSS&& p[4] == CROSS&& p[6] == CROSS) return CROSS;\n\n    if(p.every(position => position != EMPTY)) return \"It is a tie\";\n  }\n\n  function reset() {\n    setState({\n      player: CIRCLE,\n      positions: [\n        EMPTY, EMPTY, EMPTY,\n        EMPTY, EMPTY, EMPTY,\n        EMPTY, EMPTY, EMPTY\n      ]\n    })\n  }\n\n  function takeTurn(position){\n    const positions = [...state.positions];\n    positions[position] = state.player;\n    setState({\n      player: state.player == CIRCLE ? CROSS : CIRCLE, positions\n    })\n  }\n\n  return (\n    <div>\n    <div className=\"grid\">\n      <Square position={0} value={state.positions[0]} takeTurn={takeTurn}/>\n      <Square position={1} value={state.positions[1]} takeTurn={takeTurn}/>\n      <Square position={2} value={state.positions[2]} takeTurn={takeTurn}/>\n      <Square position={3} value={state.positions[3]} takeTurn={takeTurn}/>\n      <Square position={4} value={state.positions[4]} takeTurn={takeTurn}/>\n      <Square position={5} value={state.positions[5]} takeTurn={takeTurn}/>\n      <Square position={6} value={state.positions[6]} takeTurn={takeTurn}/>\n      <Square position={7} value={state.positions[7]} takeTurn={takeTurn}/>\n      <Square position={8} value={state.positions[8]} takeTurn={takeTurn}/>\n    </div>\n    {winner && <Result winner={winner} reset={reset}/>}\n    </div>\n  );\n}\n\nfunction Square({ position, value, takeTurn }) {\n  function handleClick(){\n    if(value == EMPTY) \n    takeTurn(position)\n  }\n  return (\n    <div className=\"square\" onClick={handleClick}>\n      {value == CIRCLE && <Circle />}\n      {value == CROSS && <Cross />}\n    </div>\n  );\n}\n\nfunction Circle() {\n  return (\n    <svg width=\"100\" height=\"100\" viewBox=\"-50 -50 100 100\" className=\"circle\">\n      <circle cx=\"0\" cy=\"0\" r=\"40\" />  \n    </svg>\n  );\n}\n\nfunction Cross() {\n  return (\n    <svg width=\"100\" height=\"100\" viewBox=\"-50 -50 100 100\" className=\"cross\">\n      <line x1=\"-40\" y1=\"-40\" x2=\"40\" y2=\"40\" />  \n      <line x1=\"-40\" y1=\"40\" x2=\"40\" y2=\"-40\" />  \n    </svg>\n  );\n}\n\nfunction Result({winner, reset}) {\n  return (\n    <div className=\"result\">\n      {winner == CIRCLE && 'Circle won the game'}\n      {winner == CROSS && 'Cross won the game'}\n      {winner == 'It is a tie' && 'It is a tie'}\n      <button onClick={reset}>Reset</button>\n    </div>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}